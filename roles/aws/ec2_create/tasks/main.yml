---

- name: Obtaining configured SUBNET for {{ ansible_environment }} env
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ app_name }}-subnet-{{ ansible_environment }}-a"
  register: register_subnet_info

- name: Obtaining configured SG for {{ ansible_environment }} env
  amazon.aws.ec2_group_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ app_name }}-sg-{{ ansible_environment }}"
  register: register_sg_info

- name: Provisioning {{ param_exact_count }} {{ param_instance_type }} instance(s) tagged as {{ app_name }}-ec2-{{ ansible_environment }}-{{ param_name }}
  amazon.aws.ec2:
    assign_public_ip: yes
    key_name: "ansible-ec2-{{ ansible_environment }}"
    instance_type: "{{ param_instance_type }}"
    image: "{{ param_ami_id }}"
    instance_profile_name: "{{ app_name }}-iam-ec2-role"
    region: "{{ aws_region }}"
    zone: "{{ aws_region }}a"
    vpc_subnet_id: "{{ register_subnet_info.subnets[0].subnet_id }}"
    group_id: "{{ register_sg_info.security_groups[0].group_id }}"
    wait: true
    exact_count: "{{ param_exact_count }}"
    monitoring: yes
    volumes:
      - device_name: /dev/sda1
        volume_size: 50
        volume_type: gp3
        delete_on_termination: yes
    count_tag:
      Name: "{{ app_name }}-ec2-{{ ansible_environment }}-{{ param_name }}"
    instance_tags:
      Name: "{{ app_name }}-ec2-{{ ansible_environment }}-{{ param_name }}"
      Environment: "{{ app_name }}-app-{{ ansible_environment }}"
  register: register_ec2

- name: Wait for EC2 instances SSH server to come up before continuing
  wait_for:
    port: 22
    host: "{{ item.public_ip }}"
    delay: 10
    timeout: 320
  loop: "{{ register_ec2.instances }}"

- name: Refresh inventory of EC2 instances
  meta: refresh_inventory
